}
interval <- calls
interval[, 2:4] <- NaN
delta <- 0.1
for(i in 1:20) {
for(j in 1:3) {
a <- seq(1, 5, by=delta)
for(k in a) {
if (fsigma(k,i,j)*fsigma(k + delta,i,j) < 0) {interval[i, j+1] <- k}
}
}
}
ImpliedVolatility <- calls
ptm <- proc.time()
count <- 0
for(i in 1:20) {
for(j in 1:3) {
a <- interval[i, j + 1]
if (is.na(a) == T) {
ImpliedVolatility[i, j + 1] <- NaN
next
}
b <- a + delta
epsilon <- abs(a - b)
while(epsilon > 1e-4) {
count <- count +1
mid <- (a + b)/2
if(fsigma(a, i, j)*fsigma(mid, i, j) < 0 ) b <- mid
else a <- mid
epsilon <- abs(a - b)
}
ImpliedVolatility[i, j+1] <- a
}
}
count
ImpliedVolatility
proc.time() - ptm
calls
fsigma <- function(sigma, K_i, maturity_i) {
cc <- calls[K_i, maturity_i + 1]
K <- calls[K_i, 1]
if (maturity_i == 1) tau = 23/252 # time to maturity
else if(maturity_i == 2) tau = 48/252
else tau = 111/252
ans <- Callprice(S_0, tau, K, r, sigma) - cc
return(ans)
}
interval <- calls
interval[, 2:4] <- NaN
View(interval)
delta <- 0.1
for(i in 1:20) {
for(j in 1:3) {
a <- seq(1, 5, by=delta)
for(k in a) {
if (fsigma(k,i,j)*fsigma(k + delta,i,j) < 0) {interval[i, j+1] <- k}
}
}
}
View(interval)
fsigma <- function(sigma, K_i, maturity_i) {
cc <- calls[K_i, maturity_i + 1]
K <- calls[K_i, 1]
if (maturity_i == 1) tau = 23/252 # time to maturity
else if(maturity_i == 2) tau = 48/252
else tau = 111/252
ans <- Callprice(S_0, tau, K, r, sigma) - cc
return(ans)
}
r <- 0.075      # Interest rate
Callprice <- function(S0, tau, K, r, sigma) {
d1 <- (log(S0/K)+(r+sigma^2/2)*tau)/sigma/sqrt(tau)
d2 <- d1 - sigma*sqrt(tau)
c <- S0*pnorm(d1) - K*exp(-r*tau)*pnorm(d2)
return(c)
}
Putprice <- function(S0, tau, K, r, sigma) {
d1 <- (log(S0/K)+(r+sigma^2/2)*tau)/sigma/sqrt(tau)
d2 <- d1 - sigma*sqrt(tau)
p <- K*exp(-r*tau)*pnorm(-d2) - S0*pnorm(-d1)
return(p)
}
Callprice(S0, tau, K, r, sigma)
Putprice(S0, tau, K, r, sigma)
AAPL.OPTS <- getOptionChain("AAPL", NULL)
fsigma <- function(sigma, K_i, maturity_i) {
cc <- calls[K_i, maturity_i + 1]
K <- calls[K_i, 1]
if (maturity_i == 1) tau = 23/252 # time to maturity
else if(maturity_i == 2) tau = 48/252
else tau = 111/252
ans <- Callprice(S_0, tau, K, r, sigma) - cc
return(ans)
}
interval <- calls
interval[, 2:4] <- NaN
delta <- 0.1
for(i in 1:20) {
for(j in 1:3) {
a <- seq(1, 5, by=delta)
for(k in a) {
if (fsigma(k,i,j)*fsigma(k + delta,i,j) < 0) {interval[i, j+1] <- k}
}
}
}
ImpliedVolatility <- calls
View(interval)
S0 <- 100       # Stock price
tau <- 30/252   # Time to maturity
K <- 100        # Strike price
r <- 0.075      # Interest rate
sigma <- 0.2    # Volatility
Callprice <- function(S0, tau, K, r, sigma) {
d1 <- (log(S0/K)+(r+sigma^2/2)*tau)/sigma/sqrt(tau)
d2 <- d1 - sigma*sqrt(tau)
c <- S0*pnorm(d1) - K*exp(-r*tau)*pnorm(d2)
return(c)
}
Putprice <- function(S0, tau, K, r, sigma) {
d1 <- (log(S0/K)+(r+sigma^2/2)*tau)/sigma/sqrt(tau)
d2 <- d1 - sigma*sqrt(tau)
p <- K*exp(-r*tau)*pnorm(-d2) - S0*pnorm(-d1)
return(p)
}
Callprice(S0, tau, K, r, sigma)
# 3.049619
Putprice(S0, tau, K, r, sigma)
# 2.456149
AAPL.OPTS <- getOptionChain("AAPL", NULL)
C1 <- AAPL.OPTS$Mar.17.2017$calls
C1$Ave.Price <- (C1$Bid + C1$Ask)/2
C1 <- C1[, c(1, 8)]
C2 <- AAPL.OPTS$Apr.21.2017$calls
C2$Ave.Price <- (C2$Bid + C2$Ask)/2
C2 <- C2[, c(1, 8)]
C3 <- AAPL.OPTS$Jul.21.2017$calls
C3$Ave.Price <- (C3$Bid + C3$Ask)/2
C3 <- C3[, c(1, 8)]
temp <- merge(C1, C2, by = "Strike")
calls <- merge(temp, C3, by = "Strike")
colnames(calls) <- c("Strike", "Mar.17.2017", "Apr.21.2017", "Oct.20.2017")
calls <- calls[1:20, ]
print(calls)
# Get the actual stock price
todaystock <- getQuote("AAPL")
S_0 <- todaystock[, 2]
r <- 0.0075
fsigma <- function(sigma, K_i, maturity_i) {
cc <- calls[K_i, maturity_i + 1]
K <- calls[K_i, 1]
if (maturity_i == 1) tau = 23/252 # time to maturity
else if(maturity_i == 2) tau = 48/252
else tau = 111/252
ans <- Callprice(S_0, tau, K, r, sigma) - cc
return(ans)
}
interval <- calls
interval[, 2:4] <- NaN
delta <- 0.1
for(i in 1:20) {
for(j in 1:3) {
a <- seq(1, 5, by=delta)
for(k in a) {
if (fsigma(k,i,j)*fsigma(k + delta,i,j) < 0) {interval[i, j+1] <- k}
}
}
}
View(calls)
ptm <- proc.time()
count <- 0
for(i in 1:20) {
for(j in 1:3) {
a <- interval[i, j + 1]
if (is.na(a) == T) {
ImpliedVolatility[i, j + 1] <- NaN
next
}
b <- a + delta
epsilon <- abs(a - b)
while(epsilon > 1e-4) {
count <- count +1
mid <- (a + b)/2
if(fsigma(a, i, j)*fsigma(mid, i, j) < 0 ) b <- mid
else a <- mid
epsilon <- abs(a - b)
}
ImpliedVolatility[i, j+1] <- a
}
}
count
ImpliedVolatility
ImpliedVolatility <- calls
ptm <- proc.time()
count <- 0
for(i in 1:20) {
for(j in 1:3) {
a <- interval[i, j + 1]
if (is.na(a) == T) {
ImpliedVolatility[i, j + 1] <- NaN
next
}
b <- a + delta
epsilon <- abs(a - b)
while(epsilon > 1e-4) {
count <- count +1
mid <- (a + b)/2
if(fsigma(a, i, j)*fsigma(mid, i, j) < 0 ) b <- mid
else a <- mid
epsilon <- abs(a - b)
}
ImpliedVolatility[i, j+1] <- a
}
}
View(ImpliedVolatility)
View(interval)
attach(Weekly)
library(ISLR)
attach(Weekly)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family=binomial)
summary(glm.fit)
detach(Weekly)
attach(Weekly)
glm.fit <- lm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume)
summary(glm.fit)
library(ISLR)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data=Weekly ,family=binomial)
glm.fit <- lm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data=Weekly ,family=binomial)
Weekly
attach(Weekly)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family=binomial)
summary(glm.fit)
detach(Weekly)
library(ISLR)
library(MASS)
?Boston
Boston
summary(Boston)
attach(Weekly)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial)
summary(glm.fit)
detach(Weekly)
Weekly.train <- subset(Weekly, Year <= 2008)
Weekly.test <- subset(Weekly, Year > 2008)
fit <- glm(Direction ~ Lag2, data = Weekly.train, family = binomial)
glm.probs <- predict(fit, Weekly.test, type ="response")
glm.pred <- rep("Down", nrow(Weekly.test))
glm.pred[glm.probs >.5] <- "Up"
table(glm.pred, Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
Weekly.train <- subset(Weekly, Year <= 2008)
Weekly.test <- subset(Weekly, Year > 2008)
lda.fit <- lda(Direction ~ Lag2, data = Weekly.train)
lda.pred <- predict(lda.fit, Weekly.test)
lda.class <- lda.pred$class
table(lda.class, Weekly.test$Direction)
mean(lda.class == Weekly.test$Direction)
Weekly.train <- subset(Weekly, Year <= 2008)
Weekly.test <- subset(Weekly, Year > 2008)
qda.fit <- qda(Direction ~ Lag2, data = Weekly.train)
qda.pred <- predict(qda.fit, Weekly.test)
qda.class <- qda.pred$class
table(qda.class, Weekly.test$Direction)
mean(qda.class == Weekly.test$Direction)
knn.pred3 <- knn(Weekly.train$Lag2, Weekly.test$Lag2, Weekly.train$Direction, k = 3)
Weekly.train <- subset(Weekly, Year <= 2008)
Weekly.test <- subset(Weekly, Year > 2008)
qda.fit <- qda(Direction ~ Lag2, data = Weekly.train)
qda.pred <- predict(qda.fit, Weekly.test)
qda.class <- qda.pred$class
table(qda.class, Weekly.test$Direction)
mean(qda.class == Weekly.test$Direction)
knn.pred3 <- knn(Weekly.train$Lag2, Weekly.test$Lag2, Weekly.train$Direction, k = 3)
Weekly.train <- subset(Weekly, Year <= 2008)
Weekly.test <- subset(Weekly, Year > 2008)
library(class)
library(class)
knn.pred3 <- knn(Weekly.train$Lag2, Weekly.test$Lag2, Weekly.train$Direction, k = 3)
Weekly.train
Train.knn <- Weekly.train[, c(3, 9)]
View(Train.knn)
Test.knn <- Weekly.test[, 3]
knn.pred3 <- knn(Train.knn, Test.knn, Direction, k = 3)
Train.knn <- Weekly.train[, c(3, 9)]
Test.knn <- Weekly.test[, 3]
knn.pred3 <- knn(Train.knn, Test.knn, Direction, k = 3)
library (ISLR)
library (MASS)
library (class)
setwd("/Users/apple/Desktop/582/582_2")
DefaultPredict <- read.csv("DefaultPredict.csv")
head(DefaultPredict)
setwd("/Users/apple/Desktop/FE/582/582_2")
DefaultPredict <- read.csv("DefaultPredict.csv")
head(DefaultPredict)
dimDP <- dim(DefaultPredict)
str(Default)
glm.fit <- glm(default~balance+student+income, data=Default, family=binomial)
summary(glm.fit)
summary(glm.fit$coefficients)
glm.probs <- predict(glm.fit, data=Default, type ="response")
glm.pred=rep("No", 10000)
glm.pred[glm.probs >.5]="Yes"
table(glm.pred, default)
mean(glm.pred == default)
glm.probs <- predict(glm.fit, DefaultPredict, type="response")
glm.pred <- rep("No", dimDP[1])
glm.pred[glm.probs >.5] <- "Yes"
DefaultPredict$glm.pred <- glm.pred
lda.fit <- lda(default~balance+student+income, data=Default)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, Default)
lda.class <- lda.pred$class
table(lda.class, default)
mean(lda.class == default)
sum(lda.pred$posterior[, 1] >= .5)
sum(lda.pred$posterior[, 1] < .5)
sum(lda.pred$posterior[, 1] > .9)
lda.probs <- predict(lda.fit, DefaultPredict, type="response")
lda.pred <- rep("No", dimDP[1])
lda.pred[lda.probs$posterior[, 2] > .5] <- "Yes"
DefaultPredict$lda.pred <- lda.pred
qda.fit <- qda(default~balance+student+income, data=Default)
qda.fit
qda.probs <- predict(qda.fit, Default)
qda.class <- qda.pred$class
table(qda.class, default)
mean(qda.class == default)
qda.probs <- predict(qda.fit, DefaultPredict, type="response")
DefaultPredict$qda.pred <- qda.probs$class
str(Default)
glm.fit <- glm(default~balance+student+income, data=Default, family=binomial)
summary(glm.fit)
summary(glm.fit$coefficients)
glm.probs <- predict(glm.fit, data=Default, type ="response")
glm.pred=rep("No", 10000)
glm.pred[glm.probs >.5]="Yes"
table(glm.pred, default)
mean(glm.pred == default)
View(DefaultPredict)
Default
default <- Default$default
table(glm.pred, default)
mean(glm.pred == default)
glm.probs <- predict(glm.fit, DefaultPredict, type="response")
glm.pred <- rep("No", dimDP[1])
glm.pred[glm.probs >.5] <- "Yes"
DefaultPredict$glm.pred <- glm.pred
lda.fit <- lda(default~balance+student+income, data=Default)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, Default)
lda.class <- lda.pred$class
table(lda.class, default)
mean(lda.class == default)
sum(lda.pred$posterior[, 1] >= .5)
sum(lda.pred$posterior[, 1] < .5)
sum(lda.pred$posterior[, 1] > .9)
lda.probs <- predict(lda.fit, DefaultPredict, type="response")
lda.pred <- rep("No", dimDP[1])
lda.pred[lda.probs$posterior[, 2] > .5] <- "Yes"
DefaultPredict$lda.pred <- lda.pred
qda.fit <- qda(default~balance+student+income, data=Default)
qda.fit
qda.probs <- predict(qda.fit, Default)
qda.class <- qda.pred$class
table(qda.class, default)
mean(qda.class == default)
qda.probs <- predict(qda.fit, Default)
qda.class <- qda.pred$class
table(qda.class, default)
qda.class
qda.probs <- predict(qda.fit, Default)
qda.probs
qda.fit <- qda(default~balance+student+income, data=Default)
qda.fit
qda.probs <- predict(qda.fit, DefaultPredict, type="response")
DefaultPredict$qda.pred <- qda.probs$class
attach(Default)
detach(Default)
detach(Default)
Default.X <- cbind(Default$student, Default$balance, Default$income)
DefaultPredict.X <- cbind(DefaultPredict$student, DefaultPredict$balance, DefaultPredict$income)
class(Default.X)
Train.knn <- as.matrix(Weekly.train[, c(3, 9)])
Test.knn <- as.matrix(Weekly.test[, 3])
knn.pred3 <- knn(Train.knn, Test.knn, Direction, k = 3)
dim(Default.X)
dim(DefaultPredict.X)
Test.knn <- as.matrix(Weekly.test[, c(3, 9)])
knn.pred3 <- knn(Train.knn, Test.knn, Direction, k = 3)
Train.knn <- as.matrix(Weekly.train[, c(3, 9)])
Test.knn <- as.matrix(Weekly.test[, c(3, 9)])
dim(Train.knn)
dim(Test.knn)
direction <- Train.knn$Direction
direction <- Weekly.train$Direction
knn.pred3 <- knn(Train.knn, Test.knn, direction, k = 3)
knn.pred1 <- knn(Default.X, DefaultPredict.X, default, k = 1)
default
Default.X
Train.knn <- as.matrix(Weekly.train[, 3])
Test.knn <- as.matrix(Weekly.test[, 3])
direction <- Train.knn$Direction
knn.pred3 <- knn(Train.knn, Test.knn, direction, k = 3)
knn.pred3
table(knn.pred3, Weekly.test$Direction)
mean(knn.pred3 == Weekly.test$Direction)
table(knn.pred3, Weekly.test$Direction)
mean(knn.pred3 == Weekly.test$Direction)
knn.pred3 <- knn(Weekly.train[, 3], (Weekly.test[, 3], direction, k = 3)
knn.pred3 <- knn(Train.knn, Test.knn, direction, k = 3)
table(knn.pred3, Weekly.test$Direction)
mean(knn.pred3 == Weekly.test$Direction)
knn.pred3 <- knn(Weekly.train[, 3], Weekly.test[, 3], direction, k = 3)
knn.pred1 <- knn(Train.knn, Test.knn, direction, k = 1)
table(knn.pred1, Weekly.test$Direction)
mean(knn.pred1 == Weekly.test$Direction)
knn.pred2 <- knn(Train.knn, Test.knn, direction, k = 2)
table(knn.pred2, Weekly.test$Direction)
mean(knn.pred2 == Weekly.test$Direction)
knn.pred3 <- knn(Train.knn, Test.knn, direction, k = 3)
table(knn.pred3, Weekly.test$Direction)
mean(knn.pred3 == Weekly.test$Direction)
library(class)
library(ISLR)
?Weekly
attach(Weekly)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial)
summary(glm.fit)
detach(Weekly)
Weekly.train <- subset(Weekly, Year <= 2008)
Weekly.test <- subset(Weekly, Year > 2008)
fit <- glm(Direction ~ Lag2, data = Weekly.train, family = binomial)
glm.probs <- predict(fit, Weekly.test, type ="response")
glm.pred <- rep("Down", nrow(Weekly.test))
glm.pred[glm.probs >.5] <- "Up"
table(glm.pred, Weekly.test$Direction)
mean(glm.pred == Weekly.test$Direction)
lda.fit <- lda(Direction ~ Lag2, data = Weekly.train)
lda.pred <- predict(lda.fit, Weekly.test)
lda.class <- lda.pred$class
table(lda.class, Weekly.test$Direction)
mean(lda.class == Weekly.test$Direction)
qda.fit <- qda(Direction ~ Lag2, data = Weekly.train)
qda.pred <- predict(qda.fit, Weekly.test)
qda.class <- qda.pred$class
table(qda.class, Weekly.test$Direction)
mean(qda.class == Weekly.test$Direction)
direction <- Weekly.train$Direction
Train.knn <- as.matrix(Weekly.train[, 3])
Test.knn <- as.matrix(Weekly.test[, 3])
knn.pred1 <- knn(Train.knn, Test.knn, direction, k = 1)
table(knn.pred1, Weekly.test$Direction)
mean(knn.pred1 == Weekly.test$Direction)
knn.pred2 <- knn(Train.knn, Test.knn, direction, k = 2)
table(knn.pred2, Weekly.test$Direction)
mean(knn.pred2 == Weekly.test$Direction)
knn.pred3 <- knn(Train.knn, Test.knn, direction, k = 3)
table(knn.pred3, Weekly.test$Direction)
mean(knn.pred3 == Weekly.test$Direction)
library (ISLR)
library (MASS)
library (class)
Default
library (ISLR)
library (MASS)
library (class)
setwd("xxx")
DefaultPredict <- read.csv("DefaultPredict.csv")
head(DefaultPredict)
dimDP <- dim(DefaultPredict)
default <- Default$default
# Linear Discriminant Analysis
lda.fit <- lda(default~balance+student+income, data=Default)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, Default)
lda.class <- lda.pred$class
table(lda.class, default)
mean(lda.class == default)
random.order <- sample(seq(1,n), 10000)
library(MASS)
library(class)
setwd("/Users/apple/Desktop/590/H4")
creditcard <- read.csv("creditcard.csv")
head(creditcard)
n <- dim(creditcard)[1] # there are n records
# Arrange this dataset in a random order
set.seed(1)
d <- 10000
random.order <- sample(seq(1,n), d)
creditcard <- creditcard[random.order, ]
# Divide dataset into two group: Training data and test data
training <- creditcard[seq(1, d/2), ]
test <- creditcard[seq(d/2+1, d), ]
class <- training$Class
train.knn <- as.matrix(training[, seq(1,30)])
test.knn <- as.matrix(test[, seq(1,30)])
knn.pred10 <- knn(train.knn, test.knn, class, k = 10)
DefaultPredict$knn.pred10 <- knn.pred10
knn.pred10
table(test$Class, knn.pred10)
knn.pred3 <- knn(train.knn, test.knn, class, k = 3)
knn.pred1 <- knn(train.knn, test.knn, class, k = 1)
knn.pred3 <- knn(train.knn, test.knn, class, k = 3)
knn.pred6 <- knn(train.knn, test.knn, class, k = 6)
knn.pred10 <- knn(train.knn, test.knn, class, k = 10)
table(test$Class, knn.pred1)
table(test$Class, knn.pred3)
table(test$Class, knn.pred6)
table(test$Class, knn.pred10)
